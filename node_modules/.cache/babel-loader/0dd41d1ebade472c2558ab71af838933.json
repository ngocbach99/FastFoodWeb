{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\React-redux-shopping-web-app-master (1)\\\\fast-food\\\\src\\\\views\\\\Cart.jsx\";\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { removeFromCart, clearCart, updateCartProductCount } from \"../store/actions\";\nimport CartProduct from \"../components/Cart/CartProducts\";\nimport CartProductTotals from \"../components/Cart/CartProductTotals\";\nimport OrderSuccess from \"../components/OrderSuccess\";\nimport PropTypes from \"prop-types\";\nimport { currencyToUse } from \"../Utility/currency\";\n\nvar Cart = function Cart(props) {\n  var productCountHandler = function productCountHandler(field_value, product_details) {\n    props.updateCartProductCountProp(field_value, product_details);\n  };\n\n  var cartContent = null;\n  var currencyKeys = currencyToUse(props.usedCurrencyProp);\n  var currencyValue = currencyKeys.value;\n\n  if (props.cartTotalProp > 0) {\n    var cartPriceCountArray = [];\n    var cartProducts = props.cartProductsProp.map(function (productInCart, index) {\n      // fetch product information from source based on id\n      // product information can also be stored in state\n      var productFromStore = props.productProps.find(function (product) {\n        return product.id === productInCart.id;\n      });\n      cartPriceCountArray.push({\n        price: productFromStore.quantity > 0 ? Math.round(productFromStore.price * currencyValue) : 0,\n        count: productInCart.quantity\n      });\n      return /*#__PURE__*/React.createElement(CartProduct, {\n        key: index,\n        productId: productFromStore.id,\n        productName: productFromStore.name,\n        productVendor: productFromStore.vendor,\n        productCategory: productFromStore.category,\n        productPhoto: productFromStore.img,\n        productPrice: Math.round(productFromStore.price * currencyValue),\n        productCount: productInCart.quantity,\n        productSize: productInCart.size,\n        productQuantity: productFromStore.quantity,\n        updateProductCount: function updateProductCount(event) {\n          return productCountHandler(event.target.value, productInCart);\n        },\n        removeCartProduct: function removeCartProduct() {\n          return props.removeProductFromCartProp(productInCart);\n        },\n        currency: props.usedCurrencyProp,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      });\n    });\n    var cartTotals = /*#__PURE__*/React.createElement(CartProductTotals, {\n      subtotal: cartPriceCountArray.reduce(function (acc, el) {\n        return acc + el.price * el.count;\n      }, 0),\n      vat: props.vatProp,\n      clearCart: function clearCart() {\n        return props.clearProductsFromCartProp();\n      },\n      currency: props.usedCurrencyProp,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    });\n    cartContent = /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, cartProducts, cartTotals);\n  } else if (props.cartTotalProp === 0 && props.orderSuccessProp) {\n    cartContent = /*#__PURE__*/React.createElement(OrderSuccess, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }\n    });\n  } else {\n    cartContent = /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"shop-empty-cart\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, \"Gi\\u1ECF h\\xE0ng c\\xF2n tr\\u1ED1ng. \", /*#__PURE__*/React.createElement(Link, {\n      to: \"/all\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }\n    }, \"H\\xE3y ch\\u1ECDn m\\xF3n tr\\u01B0\\u1EDBc nh\\xE9.\"));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container shop-container py-4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-4 shop-div\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, cartContent));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    productProps: state.products,\n    cartTotalProp: state.cartTotal,\n    cartProductsProp: state.cart,\n    vatProp: state.vat,\n    orderSuccessProp: state.orderSuccess,\n    usedCurrencyProp: state.usedCurrency\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    removeProductFromCartProp: function removeProductFromCartProp(productDetails) {\n      return dispatch(removeFromCart(productDetails));\n    },\n    clearProductsFromCartProp: function clearProductsFromCartProp() {\n      return dispatch(clearCart());\n    },\n    updateCartProductCountProp: function updateCartProductCountProp(value, productDetails) {\n      return dispatch(updateCartProductCount(Number(value), productDetails));\n    }\n  };\n};\n\nCart.propTypes = {\n  cartTotalProp: PropTypes.number.isRequired,\n  cartProductsProp: PropTypes.array.isRequired,\n  productProps: PropTypes.array.isRequired,\n  orderSuccessProp: PropTypes.bool.isRequired,\n  vatProp: PropTypes.number,\n  usedCurrencyProp: PropTypes.object.isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);","map":{"version":3,"sources":["D:/React-redux-shopping-web-app-master (1)/fast-food/src/views/Cart.jsx"],"names":["React","connect","Link","removeFromCart","clearCart","updateCartProductCount","CartProduct","CartProductTotals","OrderSuccess","PropTypes","currencyToUse","Cart","props","productCountHandler","field_value","product_details","updateCartProductCountProp","cartContent","currencyKeys","usedCurrencyProp","currencyValue","value","cartTotalProp","cartPriceCountArray","cartProducts","cartProductsProp","map","productInCart","index","productFromStore","productProps","find","product","id","push","price","quantity","Math","round","count","name","vendor","category","img","size","event","target","removeProductFromCartProp","cartTotals","reduce","acc","el","vatProp","clearProductsFromCartProp","orderSuccessProp","mapStateToProps","state","products","cartTotal","cart","vat","orderSuccess","usedCurrency","mapDispatchToProps","dispatch","productDetails","Number","propTypes","number","isRequired","array","bool","object"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport {\n  removeFromCart,\n  clearCart,\n  updateCartProductCount,\n} from \"../store/actions\";\nimport CartProduct from \"../components/Cart/CartProducts\";\nimport CartProductTotals from \"../components/Cart/CartProductTotals\";\nimport OrderSuccess from \"../components/OrderSuccess\";\nimport PropTypes from \"prop-types\";\nimport { currencyToUse } from \"../Utility/currency\";\n\nconst Cart = (props) => {\n  const productCountHandler = (field_value, product_details) => {\n    props.updateCartProductCountProp(field_value, product_details);\n  };\n\n  let cartContent = null;\n  let currencyKeys = currencyToUse(props.usedCurrencyProp);\n  let currencyValue = currencyKeys.value;\n\n  if (props.cartTotalProp > 0) {\n    let cartPriceCountArray = [];\n    let cartProducts = props.cartProductsProp.map((productInCart, index) => {\n      // fetch product information from source based on id\n      // product information can also be stored in state\n      let productFromStore = props.productProps.find(\n        (product) => product.id === productInCart.id\n      );\n      cartPriceCountArray.push({\n        price:\n          productFromStore.quantity > 0\n            ? Math.round(productFromStore.price * currencyValue)\n            : 0,\n        count: productInCart.quantity,\n      });\n      return (\n        <CartProduct\n          key={index}\n          productId={productFromStore.id}\n          productName={productFromStore.name}\n          productVendor={productFromStore.vendor}\n          productCategory={productFromStore.category}\n          productPhoto={productFromStore.img}\n          productPrice={Math.round(productFromStore.price * currencyValue)}\n          productCount={productInCart.quantity}\n          productSize={productInCart.size}\n          productQuantity={productFromStore.quantity}\n          updateProductCount={(event) =>\n            productCountHandler(event.target.value, productInCart)\n          }\n          removeCartProduct={() =>\n            props.removeProductFromCartProp(productInCart)\n          }\n          currency={props.usedCurrencyProp}\n        />\n      );\n    });\n\n    let cartTotals = (\n      <CartProductTotals\n        subtotal={cartPriceCountArray.reduce(\n          (acc, el) => acc + el.price * el.count,\n          0\n        )}\n        vat={props.vatProp}\n        clearCart={() => props.clearProductsFromCartProp()}\n        currency={props.usedCurrencyProp}\n      />\n    );\n\n    cartContent = (\n      <React.Fragment>\n        {cartProducts}\n        {cartTotals}\n      </React.Fragment>\n    );\n  } else if (props.cartTotalProp === 0 && props.orderSuccessProp) {\n    cartContent = <OrderSuccess />;\n  } else {\n    cartContent = (\n      <h5 className={\"shop-empty-cart\"}>\n        Giỏ hàng còn trống. <Link to={\"/all\"}>Hãy chọn món trước nhé.</Link>\n      </h5>\n    );\n  }\n\n  return (\n    <div className=\"container shop-container py-4\">\n      <div className={\"p-4 shop-div\"}>{cartContent}</div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    productProps: state.products,\n    cartTotalProp: state.cartTotal,\n    cartProductsProp: state.cart,\n    vatProp: state.vat,\n    orderSuccessProp: state.orderSuccess,\n    usedCurrencyProp: state.usedCurrency,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    removeProductFromCartProp: (productDetails) =>\n      dispatch(removeFromCart(productDetails)),\n    clearProductsFromCartProp: () => dispatch(clearCart()),\n    updateCartProductCountProp: (value, productDetails) =>\n      dispatch(updateCartProductCount(Number(value), productDetails)),\n  };\n};\n\nCart.propTypes = {\n  cartTotalProp: PropTypes.number.isRequired,\n  cartProductsProp: PropTypes.array.isRequired,\n  productProps: PropTypes.array.isRequired,\n  orderSuccessProp: PropTypes.bool.isRequired,\n  vatProp: PropTypes.number,\n  usedCurrencyProp: PropTypes.object.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);\n"]},"metadata":{},"sourceType":"module"}